<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="farmersmarket.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="0"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="7306"/><column_width id="4" width="0"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="booth" custom_title="0" dock_id="3" table="4,5:mainbooth"/><dock_state state="000000ff00000000fd0000000100000002000004140000039ffc0100000003fb000000160064006f0063006b00420072006f00770073006500310100000000000003a40000000000000000fb000000160064006f0063006b00420072006f00770073006500320100000000ffffffff0000000000000000fb000000160064006f0063006b00420072006f00770073006500330100000000000004140000016c00ffffff000004140000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="booth" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="104"/><column index="2" value="125"/><column index="3" value="300"/><column index="4" value="83"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1*">-- SELECT 

--selecting everything from customer
SELECT * 
FROM customer;

-- add a static value
SELECT 2025 as this_year, 'April' as this_month, customer_id
FROM customer;

-- add an order by + limit
SELECT * 
FROM customer
ORDER BY customer_last_name
LIMIT 10



-- WHERE

SELECT * FROM customer
WHERE customer_id = 1
OR customer_id = 2; -- 1 or 2
--AND customer_id = 2 -- returns nothing

--IN
SELECT * FROM customer_purchases
WHERE customer_id IN (3,4,5) -- only customers 3,4,5 
AND vendor_id IN (3,4,5);

--LIKE
-- all of the peppers
SELECT * FROM product
WHERE product_name LIKE '%pepper%';

-- customers with a last name starting with a
SELECT * FROM customer
WHERE customer_last_name LIKE 'a%';

--NULLs and Blanks
SELECT * FROM product
WHERE product_size IS NULL
OR product_size = '' -- tw

</sql><sql name="SQL 2*">--CASE

SELECT * 
,CASE WHEN vendor_type = 'Fresh Focused'
	THEN 'Wednesday'
WHEN vendor_type = 'Prepared Foods'
	THEN 'Thursday'
ELSE 'Saturday'
END as day_of_specialty
--pie day, otherwise nothing
,CASE WHEN vendor_name LIKE '%pie%'
	THEN 'Wednesday'
	END as only_pie_day
,CASE WHEN vendor_name = &quot;Annie's Pies&quot;  -- double quote work, but not for all editors!
	THEN 'annie is best'
	END
FROM vendor</sql><sql name="SQL 3*">--CASE

SELECT * 
,CASE WHEN vendor_type = 'Fresh Focused'
	THEN 'Wednesday'
WHEN vendor_type = 'Prepared Foods'
	THEN 'Thursday'
ELSE 'Saturday'
END as day_of_specialty
--pie day, otherwise nothing
,CASE WHEN vendor_name LIKE '%pie%'
	THEN 'Wednesday'
	END as only_pie_day
,CASE WHEN vendor_name = &quot;Annie's Pies&quot;  -- double quote work, but not for all editors!
	THEN 'annie is best'
	END as annie_is_king
FROM vendor
</sql><sql name="SQL 4*">--DISTINCT

-- without distinct, 4221 rows, of various customer_ids 
SELECT customer_id FROM customer_purchases;

-- with DISTINCT, one row per customer, 26 rows total
SELECT DISTINCT customer_id FROM customer_purchases;

-- without distinct, only wed/sat 150 times over
SELECT market_day
FROM market_date_info;

-- market is open sat/wed!
SELECT DISTINCT market_day
FROM market_date_info;

/* which vendor has sold products to a customer */
SELECT DISTINCT vendor_id
FROM customer_purchases;  -- 3 rows, vendor_id 7,8,4

/* which vendor has sold products to a customer AND which product was it... */
SELECT DISTINCT vendor_id, product_id
FROM customer_purchases; -- 8 rows

/* which vendor has sold products to a customer AND which product was it AND to whom was it sold ? */
SELECT DISTINCT vendor_id, product_id, customer_id
FROM customer_purchases -- 200 rows
ORDER by product_id ASC, customer_id DESC
</sql><sql name="SQL 5*">-- INNER JOIN
-- no alias INNER JOIN

/* get product names alongside customer_purchases...only products that a customer has purchased will be present */
SELECT 
product_name, -- coming from product
vendor_id, -- coming from cp...below
market_date,
customer_id,
customer_purchases.product_id

FROM customer_purchases
INNER JOIN product
	ON customer_purchases.product_id = product.product_id;
	
/* which vendor has sold products to a customer AND which product was it AND to whom was it sold ? */
SELECT DISTINCT vendor_id, 
product_id, 
--customer_id -- this is dissatisfying...let's have a name!
customer_first_name,
customer_last_name

FROM customer_purchases as cp
INNER JOIN customer as c
	ON cp.customer_id = c.customer_id
	
	/* which vendor has sold products to a customer AND which product was it AND to whom was it sold ? */
SELECT DISTINCT 
--vendor_id, 
vendor_name,
--product_id, 
product_name,
--customer_id -- this is dissatisfying...let's have a name!
customer_first_name,
customer_last_name

FROM customer_purchases as cp
INNER JOIN customer as c
	ON cp.customer_id = c.customer_id
INNER JOIN vendor as v
	ON cp.vendor_id = v.vendor_id
INNER JOIN product as p
	ON cp.product_id = p.product_id
	
ORDER BY customer_first_name, customer_last_name, product_name, market_date</sql><sql name="SQL 6*">
-- SUM &amp; avg

-- how much did a customer spend each day
SELECT 
market_date,
customer_id,
SUM(quantity*cost_to_customer_per_qty) as total_cost

FROM customer_purchases
GROUP BY market_date, customer_id;

--how much does each customer spend on average
SELECT 
customer_first_name,
customer_last_name,
ROUND(AVG(quantity*cost_to_customer_per_qty),2) as avg_cost

FROM customer_purchases as cp
INNER JOIN customer as c
	ON c.customer_id = cp.customer_id

GROUP BY c.customer_id

-- MIN &amp; MAX 

-- what is the most expensive product

SELECT 
product_name, max(original_price) as most_expensive -- doesnt handle ties well

FROM product p 
INNER JOIN vendor_inventory vi
	ON p.product_id = vi.product_id;
	
-- minimum price per each product_qty_type
SELECT DISTINCT
product_name, product_qty_type,
--original_price
min(original_price)

FROM product p 
INNER JOIN vendor_inventory vi
	ON p.product_id = vi.product_id
GROUP BY product_qty_type	

order by product_qty_type, original_price;


--PROVE IT!
	
-- minimum price per each product_qty_type
SELECT DISTINCT
product_name, product_qty_type,
original_price


FROM product p 
INNER JOIN vendor_inventory vi
	ON p.product_id = vi.product_id	

order by product_qty_type, original_price



-- arthimitic 

SELECT 10.0 / 3.0 as division
,CAST(10.0 as INT) / CAST(3.0 as INT) as integer_division;

SELECT power(2,2)
,pi()


-- HAVING

-- how much did a customer spend on each day
SELECT 
market_date,
customer_id,
SUM(quantity*cost_to_customer_per_qty) as total_cost

FROM customer_purchases
WHERE customer_id BETWEEN 1 AND 5 -- filtering the non-aggregated values
OR customer_id = 10
GROUP BY market_date, customer_id
HAVING total_cost &gt; 50; -- filtering the aggregated values

-- how many products were bought

SELECT count(product_id) as num_of_prod, product_id

FROM customer_purchases
WHERE product_id &lt;= 8
GROUP BY product_id
HAVING count(product_id) BETWEEN 300 AND 500


-- SUBQUERIES: JOIN

-- &quot;what is the single item that has been bought in the greatest quantity?&quot;
SELECT product_name,  max(quantity)

FROM product p
INNER JOIN (
	--inner query
	SELECT product_id, count(quantity) as quantity_purchased
	FROM customer_purchases
	GROUP BY product_id
	
) x ON p.product_id = x.product_id;

-- simple subquery in a FROM statement

SELECT DISTINCT
product_id, inflation
FROM (
	SELECT product_id, cost_to_customer_per_qty,
		CASE WHEN cost_to_customer_per_qty &lt; '1.00' THEN cost_to_customer_per_qty*5
			ELSE cost_to_customer_per_qty END as inflation
	FROM customer_purchases
) 


--SUBQUERIES: WHERE

-- how much did each customer spend at each vendor for each day at the market when it rains
SELECT 
market_date,
customer_id,
vendor_id,
SUM(quantity*cost_to_customer_per_qty) as total_cost

FROM customer_purchases

-- filter by rain_flag
-- &quot;what dates was it raining&quot;

WHERE market_date IN 
	(
	SELECT market_date FROM market_date_info
	WHERE market_rain_flag = 1
	)
GROUP BY market_date, vendor_id, customer_id;

-- what is the name of the vendor who sells pie?

SELECT DISTINCT vendor_name
FROM vendor_inventory vi
INNER JOIN vendor v
	ON vi.vendor_id = v.vendor_id

WHERE product_id IN (
	SELECT product_id
	FROM product
	WHERE product_name LIKE '%pie%'
)

-- what is the name of the vendor who has SOLD pie(s)?

SELECT DISTINCT vendor_name
FROM customer_purchases cp -- minor contextual difference!
INNER JOIN vendor v
	ON cp.vendor_id = v.vendor_id

WHERE product_id IN (
	SELECT product_id
	FROM product
	WHERE product_name LIKE '%pie%'
)
	</sql><sql name="SQL 7*">--TEMP tables

--if a table named &quot;new_vendor_inventory&quot; exists, delete it, otherwise do NOTHING
DROP TABLE IF EXISTS new_vendor_inventory;

--make the TABLE
CREATE TEMP TABLE new_vendor_inventory AS

--definition of the table 
SELECT *,
original_price*5 as inflation
FROM vendor_inventory;</sql><sql name="assignment1.sql" filename="/Users/rehanahmed/sql/02_activities/assignments/assignment1.sql">-- Reference to file &quot;/Users/rehanahmed/sql/02_activities/assignments/assignment1.sql&quot; (not supported by this version) --</sql><current_tab id="7"/></tab_sql></sqlb_project>
